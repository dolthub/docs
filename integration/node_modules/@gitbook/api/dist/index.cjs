var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  APIIntegrationScope: () => APIIntegrationScope,
  AnalyticsSearchPeriod: () => AnalyticsSearchPeriod,
  AnalyticsTrafficInterval: () => AnalyticsTrafficInterval,
  Api: () => Api,
  BillingInterval: () => BillingInterval,
  BillingProduct: () => BillingProduct,
  ChangeRequestStatus: () => ChangeRequestStatus,
  CloudflareHostnameStatus: () => CloudflareHostnameStatus,
  CloudflareHostnameTLSStatus: () => CloudflareHostnameTLSStatus,
  CloudflareHostnameTLSValidationMethod: () => CloudflareHostnameTLSValidationMethod,
  ContentKitIcon: () => ContentKitIcon,
  ContentType: () => ContentType,
  ContentVisibility: () => ContentVisibility,
  GITBOOK_DEFAULT_ENDPOINT: () => GITBOOK_DEFAULT_ENDPOINT,
  GitBookAPI: () => GitBookAPI,
  HttpClient: () => HttpClient,
  ImportContentSource: () => ImportContentSource,
  IntegrationCategory: () => IntegrationCategory,
  IntegrationInstallationSpaceSelection: () => IntegrationInstallationSpaceSelection,
  IntegrationInstallationStatus: () => IntegrationInstallationStatus,
  IntegrationScope: () => IntegrationScope,
  IntegrationVisibility: () => IntegrationVisibility,
  MemberRole: () => MemberRole,
  PurgeCDNCacheContextType: () => PurgeCDNCacheContextType
});
module.exports = __toCommonJS(src_exports);

// src/client.ts
var ContentVisibility = /* @__PURE__ */ ((ContentVisibility2) => {
  ContentVisibility2["Public"] = "public";
  ContentVisibility2["Unlisted"] = "unlisted";
  ContentVisibility2["ShareLink"] = "share-link";
  ContentVisibility2["VisitorAuth"] = "visitor-auth";
  ContentVisibility2["InCollection"] = "in-collection";
  ContentVisibility2["Private"] = "private";
  return ContentVisibility2;
})(ContentVisibility || {});
var ImportContentSource = /* @__PURE__ */ ((ImportContentSource2) => {
  ImportContentSource2["Website"] = "website";
  ImportContentSource2["Docx"] = "docx";
  ImportContentSource2["Markdown"] = "markdown";
  ImportContentSource2["Html"] = "html";
  ImportContentSource2["Zip"] = "zip";
  ImportContentSource2["Confluence"] = "confluence";
  ImportContentSource2["GithubWiki"] = "github-wiki";
  ImportContentSource2["DropboxPaper"] = "dropbox-paper";
  ImportContentSource2["Notion"] = "notion";
  ImportContentSource2["Quip"] = "quip";
  ImportContentSource2["GoogleDocs"] = "google-docs";
  ImportContentSource2["OpenApi"] = "open-api";
  return ImportContentSource2;
})(ImportContentSource || {});
var MemberRole = /* @__PURE__ */ ((MemberRole2) => {
  MemberRole2["Admin"] = "admin";
  MemberRole2["Create"] = "create";
  MemberRole2["Edit"] = "edit";
  MemberRole2["Review"] = "review";
  MemberRole2["Comment"] = "comment";
  MemberRole2["Read"] = "read";
  return MemberRole2;
})(MemberRole || {});
var ChangeRequestStatus = /* @__PURE__ */ ((ChangeRequestStatus2) => {
  ChangeRequestStatus2["Draft"] = "draft";
  ChangeRequestStatus2["Open"] = "open";
  ChangeRequestStatus2["Archived"] = "archived";
  ChangeRequestStatus2["Merged"] = "merged";
  return ChangeRequestStatus2;
})(ChangeRequestStatus || {});
var AnalyticsSearchPeriod = /* @__PURE__ */ ((AnalyticsSearchPeriod2) => {
  AnalyticsSearchPeriod2["LastMonth"] = "last_month";
  AnalyticsSearchPeriod2["LastWeek"] = "last_week";
  AnalyticsSearchPeriod2["LastYear"] = "last_year";
  return AnalyticsSearchPeriod2;
})(AnalyticsSearchPeriod || {});
var AnalyticsTrafficInterval = /* @__PURE__ */ ((AnalyticsTrafficInterval2) => {
  AnalyticsTrafficInterval2["Daily"] = "daily";
  AnalyticsTrafficInterval2["Weekly"] = "weekly";
  AnalyticsTrafficInterval2["Monthly"] = "monthly";
  return AnalyticsTrafficInterval2;
})(AnalyticsTrafficInterval || {});
var IntegrationScope = /* @__PURE__ */ ((IntegrationScope2) => {
  IntegrationScope2["SpaceViewsRead"] = "space:views:read";
  IntegrationScope2["SpaceContentRead"] = "space:content:read";
  IntegrationScope2["SpaceContentWrite"] = "space:content:write";
  IntegrationScope2["SpaceMetadataRead"] = "space:metadata:read";
  IntegrationScope2["SpaceMetadataWrite"] = "space:metadata:write";
  IntegrationScope2["SpaceScriptInject"] = "space:script:inject";
  IntegrationScope2["SpaceScriptCookies"] = "space:script:cookies";
  return IntegrationScope2;
})(IntegrationScope || {});
var IntegrationInstallationSpaceSelection = /* @__PURE__ */ ((IntegrationInstallationSpaceSelection2) => {
  IntegrationInstallationSpaceSelection2["All"] = "all";
  IntegrationInstallationSpaceSelection2["Selected"] = "selected";
  return IntegrationInstallationSpaceSelection2;
})(IntegrationInstallationSpaceSelection || {});
var IntegrationCategory = /* @__PURE__ */ ((IntegrationCategory2) => {
  IntegrationCategory2["Analytics"] = "analytics";
  IntegrationCategory2["Collaboration"] = "collaboration";
  IntegrationCategory2["Marketing"] = "marketing";
  IntegrationCategory2["Content"] = "content";
  IntegrationCategory2["Other"] = "other";
  return IntegrationCategory2;
})(IntegrationCategory || {});
var IntegrationVisibility = /* @__PURE__ */ ((IntegrationVisibility2) => {
  IntegrationVisibility2["Public"] = "public";
  IntegrationVisibility2["Private"] = "private";
  return IntegrationVisibility2;
})(IntegrationVisibility || {});
var IntegrationInstallationStatus = /* @__PURE__ */ ((IntegrationInstallationStatus2) => {
  IntegrationInstallationStatus2["Active"] = "active";
  IntegrationInstallationStatus2["Pending"] = "pending";
  IntegrationInstallationStatus2["Paused"] = "paused";
  return IntegrationInstallationStatus2;
})(IntegrationInstallationStatus || {});
var BillingInterval = /* @__PURE__ */ ((BillingInterval2) => {
  BillingInterval2["Monthly"] = "monthly";
  BillingInterval2["Yearly"] = "yearly";
  return BillingInterval2;
})(BillingInterval || {});
var BillingProduct = /* @__PURE__ */ ((BillingProduct2) => {
  BillingProduct2["Free"] = "free";
  BillingProduct2["Plus"] = "plus";
  BillingProduct2["Pro"] = "pro";
  BillingProduct2["Team"] = "team";
  BillingProduct2["Business"] = "business";
  BillingProduct2["Legacy"] = "legacy";
  BillingProduct2["Startup"] = "startup";
  BillingProduct2["Enterprise"] = "enterprise";
  return BillingProduct2;
})(BillingProduct || {});
var APIIntegrationScope = /* @__PURE__ */ ((APIIntegrationScope2) => {
  APIIntegrationScope2["IntegrationRead"] = "integration:read";
  APIIntegrationScope2["IntegrationUpdate"] = "integration:update";
  APIIntegrationScope2["IntegrationInstallationRead"] = "integration:installation:read";
  APIIntegrationScope2["IntegrationInstallationUpdate"] = "integration:installation:update";
  return APIIntegrationScope2;
})(APIIntegrationScope || {});
var CloudflareHostnameStatus = /* @__PURE__ */ ((CloudflareHostnameStatus2) => {
  CloudflareHostnameStatus2["Pending"] = "pending";
  CloudflareHostnameStatus2["Active"] = "active";
  CloudflareHostnameStatus2["Blocked"] = "blocked";
  CloudflareHostnameStatus2["Moved"] = "moved";
  CloudflareHostnameStatus2["Deleted"] = "deleted";
  return CloudflareHostnameStatus2;
})(CloudflareHostnameStatus || {});
var CloudflareHostnameTLSStatus = /* @__PURE__ */ ((CloudflareHostnameTLSStatus2) => {
  CloudflareHostnameTLSStatus2["Initializing"] = "initializing";
  CloudflareHostnameTLSStatus2["PendingValidation"] = "pending_validation";
  CloudflareHostnameTLSStatus2["PendingIssuance"] = "pending_issuance";
  CloudflareHostnameTLSStatus2["PendingDeployment"] = "pending_deployment";
  CloudflareHostnameTLSStatus2["Active"] = "active";
  CloudflareHostnameTLSStatus2["PendingDeletion"] = "pending_deletion";
  CloudflareHostnameTLSStatus2["PendingCleanup"] = "pending_cleanup";
  CloudflareHostnameTLSStatus2["Deleted"] = "deleted";
  return CloudflareHostnameTLSStatus2;
})(CloudflareHostnameTLSStatus || {});
var CloudflareHostnameTLSValidationMethod = /* @__PURE__ */ ((CloudflareHostnameTLSValidationMethod2) => {
  CloudflareHostnameTLSValidationMethod2["Http"] = "http";
  CloudflareHostnameTLSValidationMethod2["Txt"] = "txt";
  CloudflareHostnameTLSValidationMethod2["Email"] = "email";
  return CloudflareHostnameTLSValidationMethod2;
})(CloudflareHostnameTLSValidationMethod || {});
var PurgeCDNCacheContextType = /* @__PURE__ */ ((PurgeCDNCacheContextType2) => {
  PurgeCDNCacheContextType2["Tags"] = "tags";
  PurgeCDNCacheContextType2["Hosts"] = "hosts";
  return PurgeCDNCacheContextType2;
})(PurgeCDNCacheContextType || {});
var ContentKitIcon = /* @__PURE__ */ ((ContentKitIcon2) => {
  ContentKitIcon2["Close"] = "close";
  ContentKitIcon2["Edit"] = "edit";
  ContentKitIcon2["Github"] = "github";
  ContentKitIcon2["Maximize"] = "maximize";
  ContentKitIcon2["Email"] = "email";
  ContentKitIcon2["Settings"] = "settings";
  ContentKitIcon2["Search"] = "search";
  ContentKitIcon2["Delete"] = "delete";
  ContentKitIcon2["Star"] = "star";
  ContentKitIcon2["Warning"] = "warning";
  ContentKitIcon2["Link"] = "link";
  ContentKitIcon2["LinkExternal"] = "link-external";
  return ContentKitIcon2;
})(ContentKitIcon || {});
var ContentType = /* @__PURE__ */ ((ContentType2) => {
  ContentType2["Json"] = "application/json";
  ContentType2["FormData"] = "multipart/form-data";
  ContentType2["UrlEncoded"] = "application/x-www-form-urlencoded";
  return ContentType2;
})(ContentType || {});
var HttpClient = class {
  constructor(apiConfig = {}) {
    this.baseUrl = "{host}/v1";
    this.securityData = null;
    this.abortControllers = /* @__PURE__ */ new Map();
    this.customFetch = (...fetchParams) => fetch(...fetchParams);
    this.baseApiParams = {
      credentials: "same-origin",
      headers: {},
      redirect: "follow",
      referrerPolicy: "no-referrer"
    };
    this.setSecurityData = (data) => {
      this.securityData = data;
    };
    this.contentFormatters = {
      ["application/json" /* Json */]: (input) => input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
      ["multipart/form-data" /* FormData */]: (input) => Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob ? property : typeof property === "object" && property !== null ? JSON.stringify(property) : `${property}`
        );
        return formData;
      }, new FormData()),
      ["application/x-www-form-urlencoded" /* UrlEncoded */]: (input) => this.toQueryString(input)
    };
    this.createAbortSignal = (cancelToken) => {
      if (this.abortControllers.has(cancelToken)) {
        const abortController2 = this.abortControllers.get(cancelToken);
        if (abortController2) {
          return abortController2.signal;
        }
        return void 0;
      }
      const abortController = new AbortController();
      this.abortControllers.set(cancelToken, abortController);
      return abortController.signal;
    };
    this.abortRequest = (cancelToken) => {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        abortController.abort();
        this.abortControllers.delete(cancelToken);
      }
    };
    this.request = async ({
      body,
      secure,
      path,
      type,
      query,
      format,
      baseUrl,
      cancelToken,
      ...params
    }) => {
      const secureParams = (typeof secure === "boolean" ? secure : this.baseApiParams.secure) && this.securityWorker && await this.securityWorker(this.securityData) || {};
      const requestParams = this.mergeRequestParams(params, secureParams);
      const queryString = query && this.toQueryString(query);
      const payloadFormatter = this.contentFormatters[type || "application/json" /* Json */];
      const responseFormat = format || requestParams.format;
      return this.customFetch(
        `${baseUrl || this.baseUrl || ""}${path}${queryString ? `?${queryString}` : ""}`,
        {
          ...requestParams,
          headers: {
            ...type && type !== "multipart/form-data" /* FormData */ ? { "Content-Type": type } : {},
            ...requestParams.headers || {}
          },
          signal: cancelToken ? this.createAbortSignal(cancelToken) : void 0,
          body: typeof body === "undefined" || body === null ? null : payloadFormatter(body)
        }
      ).then(async (response) => {
        const r = response;
        r.data = null;
        r.error = null;
        const data = !responseFormat ? r : await response[responseFormat]().then((data2) => {
          if (r.ok) {
            r.data = data2;
          } else {
            r.error = data2;
          }
          return r;
        }).catch((e) => {
          r.error = e;
          return r;
        });
        if (cancelToken) {
          this.abortControllers.delete(cancelToken);
        }
        if (!response.ok)
          throw data;
        return data;
      });
    };
    Object.assign(this, apiConfig);
  }
  encodeQueryParam(key, value) {
    const encodedKey = encodeURIComponent(key);
    return `${encodedKey}=${encodeURIComponent(
      typeof value === "number" ? value : `${value}`
    )}`;
  }
  addQueryParam(query, key) {
    return this.encodeQueryParam(key, query[key]);
  }
  addArrayQueryParam(query, key) {
    const value = query[key];
    return value.map((v) => this.encodeQueryParam(key, v)).join("&");
  }
  toQueryString(rawQuery) {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys.map(
      (key) => Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)
    ).join("&");
  }
  addQueryParams(rawQuery) {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? `?${queryString}` : "";
  }
  mergeRequestParams(params1, params2) {
    return {
      ...this.baseApiParams,
      ...params1,
      ...params2 || {},
      headers: {
        ...this.baseApiParams.headers || {},
        ...params1.headers || {},
        ...params2 && params2.headers || {}
      }
    };
  }
};
var Api = class extends HttpClient {
  constructor() {
    super(...arguments);
    this.getApiInformation = (params = {}) => this.request({
      path: `/`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    });
    this.search = {
      searchContent: (query, params = {}) => this.request({
        path: `/search`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      askQuery: (query, params = {}) => this.request({
        path: `/search/ask`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      })
    };
    this.user = {
      getAuthenticatedUser: (params = {}) => this.request({
        path: `/user`,
        method: "GET",
        secure: true,
        format: "json",
        ...params
      }),
      listSpacesForAuthenticatedUser: (query, params = {}) => this.request({
        path: `/user/spaces`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      })
    };
    this.users = {
      getUserById: (userId, params = {}) => this.request({
        path: `/users/${userId}`,
        method: "GET",
        secure: true,
        format: "json",
        ...params
      })
    };
    this.spaces = {
      getSpaceById: (spaceId, params = {}) => this.request({
        path: `/spaces/${spaceId}`,
        method: "GET",
        secure: true,
        format: "json",
        ...params
      }),
      searchSpaceContent: (spaceId, query, params = {}) => this.request({
        path: `/spaces/${spaceId}/search`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      askQueryInSpace: (spaceId, query, params = {}) => this.request({
        path: `/spaces/${spaceId}/search/ask`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      importGitRepository: (spaceId, data, params = {}) => this.request({
        path: `/spaces/${spaceId}/git/import`,
        method: "POST",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        ...params
      }),
      exportToGitRepository: (spaceId, data, params = {}) => this.request({
        path: `/spaces/${spaceId}/git/export`,
        method: "POST",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        ...params
      }),
      getContentAnalyticsForSpaceById: (spaceId, params = {}) => this.request({
        path: `/spaces/${spaceId}/insights/content`,
        method: "GET",
        secure: true,
        format: "json",
        ...params
      }),
      getSearchAnalyticsForSpaceById: (spaceId, query, params = {}) => this.request({
        path: `/spaces/${spaceId}/insights/search`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getTrafficAnalyticsForSpaceById: (spaceId, query, params = {}) => this.request({
        path: `/spaces/${spaceId}/insights/traffic`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      trackViewInSpaceById: (spaceId, data, params = {}) => this.request({
        path: `/spaces/${spaceId}/insights/track_view`,
        method: "POST",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        ...params
      }),
      getCurrentRevision: (spaceId, params = {}) => this.request({
        path: `/spaces/${spaceId}/content`,
        method: "GET",
        secure: true,
        format: "json",
        ...params
      }),
      importContent: (spaceId, data, params = {}) => this.request({
        path: `/spaces/${spaceId}/content/import`,
        method: "POST",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      }),
      listFiles: (spaceId, query, params = {}) => this.request({
        path: `/spaces/${spaceId}/content/files`,
        method: "GET",
        query,
        secure: true,
        ...params
      }),
      getPageById: (spaceId, pageId, query, params = {}) => this.request({
        path: `/spaces/${spaceId}/content/page/${pageId}`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      importContentInPageById: (spaceId, pageId, data, params = {}) => this.request({
        path: `/spaces/${spaceId}/content/page/${pageId}/import`,
        method: "POST",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      }),
      getPageByPath: (spaceId, pagePath, query, params = {}) => this.request({
        path: `/spaces/${spaceId}/content/path/${pagePath}`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      createChangeRequest: (spaceId, data, params = {}) => this.request({
        path: `/spaces/${spaceId}/change-requests`,
        method: "POST",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      }),
      mergeChangeRequest: (spaceId, changeRequestId, params = {}) => this.request({
        path: `/spaces/${spaceId}/change-requests/${changeRequestId}/merge`,
        method: "POST",
        secure: true,
        format: "json",
        ...params
      }),
      updateChangeRequest: (spaceId, changeRequestId, params = {}) => this.request({
        path: `/spaces/${spaceId}/change-requests/${changeRequestId}/update`,
        method: "POST",
        secure: true,
        format: "json",
        ...params
      }),
      getRevisionOfChangeRequestById: (spaceId, changeRequestId, params = {}) => this.request({
        path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content`,
        method: "GET",
        secure: true,
        format: "json",
        ...params
      }),
      importContentInChangeRequest: (spaceId, changeRequestId, data, params = {}) => this.request({
        path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/import`,
        method: "POST",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      }),
      listFilesInChangeRequestById: (spaceId, changeRequestId, query, params = {}) => this.request({
        path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/files`,
        method: "GET",
        query,
        secure: true,
        ...params
      }),
      getPageInChangeRequestById: (spaceId, changeRequestId, pageId, query, params = {}) => this.request({
        path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/page/${pageId}`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      importContentInChangeRequestPageById: (spaceId, changeRequestId, pageId, data, params = {}) => this.request({
        path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/page/${pageId}/import`,
        method: "POST",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      }),
      getPageInChangeRequestByPath: (spaceId, changeRequestId, pagePath, query, params = {}) => this.request({
        path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/path/${pagePath}`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getRevisionById: (spaceId, revisionId, params = {}) => this.request({
        path: `/spaces/${spaceId}/revisions/${revisionId}`,
        method: "GET",
        secure: true,
        format: "json",
        ...params
      }),
      listFilesInRevisionById: (spaceId, revisionId, query, params = {}) => this.request({
        path: `/spaces/${spaceId}/revisions/${revisionId}/files`,
        method: "GET",
        query,
        secure: true,
        ...params
      }),
      getPageInRevisionById: (spaceId, revisionId, pageId, query, params = {}) => this.request({
        path: `/spaces/${spaceId}/revisions/${revisionId}/page/${pageId}`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getPageInRevisionByPath: (spaceId, revisionId, pagePath, query, params = {}) => this.request({
        path: `/spaces/${spaceId}/revisions/${revisionId}/path/${pagePath}`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      listPermissionsAggregateInSpace: (spaceId, query, params = {}) => this.request({
        path: `/spaces/${spaceId}/permissions/aggregate`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      })
    };
    this.collections = {
      getCollectionById: (collectionId, params = {}) => this.request({
        path: `/collections/${collectionId}`,
        method: "GET",
        secure: true,
        format: "json",
        ...params
      }),
      listSpacesInCollectionById: (collectionId, query, params = {}) => this.request({
        path: `/collections/${collectionId}/spaces`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      listPermissionsAggregateInCollection: (collectionId, query, params = {}) => this.request({
        path: `/collections/${collectionId}/permissions/aggregate`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      })
    };
    this.integrations = {
      listIntegrations: (query, params = {}) => this.request({
        path: `/integrations`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getIntegrationByName: (integrationName, params = {}) => this.request({
        path: `/integrations/${integrationName}`,
        method: "GET",
        secure: true,
        format: "json",
        ...params
      }),
      publishIntegration: (integrationName, data, params = {}) => this.request({
        path: `/integrations/${integrationName}`,
        method: "POST",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      }),
      unpublishIntegration: (integrationName, params = {}) => this.request({
        path: `/integrations/${integrationName}`,
        method: "DELETE",
        secure: true,
        ...params
      }),
      listIntegrationInstallations: (integrationName, query, params = {}) => this.request({
        path: `/integrations/${integrationName}/installations`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      listIntegrationSpaceInstallations: (integrationName, query, params = {}) => this.request({
        path: `/integrations/${integrationName}/spaces`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      renderIntegrationUiWithGet: (integrationName, query, params = {}) => this.request({
        path: `/integrations/${integrationName}/render`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      renderIntegrationUiWithPost: (integrationName, data, params = {}) => this.request({
        path: `/integrations/${integrationName}/render`,
        method: "POST",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      }),
      updateIntegrationInstallation: (integrationName, installationId, data, params = {}) => this.request({
        path: `/integrations/${integrationName}/installations/${installationId}`,
        method: "PATCH",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      }),
      createIntegrationInstallationToken: (integrationName, installationId, params = {}) => this.request({
        path: `/integrations/${integrationName}/installations/${installationId}/tokens`,
        method: "POST",
        secure: true,
        format: "json",
        ...params
      }),
      updateIntegrationSpaceInstallation: (integrationName, installationId, spaceId, data, params = {}) => this.request({
        path: `/integrations/${integrationName}/installations/${installationId}/spaces/${spaceId}`,
        method: "PATCH",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      })
    };
    this.orgs = {
      listOrganizationsForAuthenticatedUser: (query, params = {}) => this.request({
        path: `/orgs`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      listMembersInOrganizationById: (organizationId, query, params = {}) => this.request({
        path: `/orgs/${organizationId}/members`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getMemberInOrganizationById: (organizationId, userId, params = {}) => this.request({
        path: `/orgs/${organizationId}/members/${userId}`,
        method: "GET",
        secure: true,
        format: "json",
        ...params
      }),
      updateMemberInOrganizationById: (organizationId, userId, data, params = {}) => this.request({
        path: `/orgs/${organizationId}/members/${userId}`,
        method: "PATCH",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      }),
      removeMemberFromOrganizationById: (organizationId, userId, params = {}) => this.request({
        path: `/orgs/${organizationId}/members/${userId}`,
        method: "DELETE",
        secure: true,
        ...params
      }),
      setUserAsSsoMemberForOrganization: (organizationId, userId, params = {}) => this.request({
        path: `/orgs/${organizationId}/members/${userId}/sso`,
        method: "POST",
        secure: true,
        ...params
      }),
      listSpacesForOrganizationMember: (organizationId, userId, query, params = {}) => this.request({
        path: `/orgs/${organizationId}/members/${userId}/spaces`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      listTeamsInOrganizationById: (organizationId, query, params = {}) => this.request({
        path: `/orgs/${organizationId}/teams`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      createOrganizationTeam: (organizationId, data, params = {}) => this.request({
        path: `/orgs/${organizationId}/teams`,
        method: "PUT",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      }),
      getTeamInOrganizationById: (organizationId, teamId, params = {}) => this.request({
        path: `/orgs/${organizationId}/teams/${teamId}`,
        method: "GET",
        secure: true,
        format: "json",
        ...params
      }),
      updateTeamInOrganizationById: (organizationId, teamId, data, params = {}) => this.request({
        path: `/orgs/${organizationId}/teams/${teamId}`,
        method: "PATCH",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      }),
      removeTeamFromOrganizationById: (organizationId, teamId, params = {}) => this.request({
        path: `/orgs/${organizationId}/teams/${teamId}`,
        method: "DELETE",
        secure: true,
        ...params
      }),
      updateMembersInOrganizationTeam: (organizationId, teamId, data, params = {}) => this.request({
        path: `/orgs/${organizationId}/teams/${teamId}/members`,
        method: "PUT",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        ...params
      }),
      listTeamMembersInOrganizationById: (organizationId, teamId, query, params = {}) => this.request({
        path: `/orgs/${organizationId}/teams/${teamId}/members`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      addMemberToOrganizationTeamById: (organizationId, teamId, userId, params = {}) => this.request({
        path: `/orgs/${organizationId}/teams/${teamId}/members/${userId}`,
        method: "PUT",
        secure: true,
        ...params
      }),
      deleteMemberFromOrganizationTeamById: (organizationId, teamId, userId, params = {}) => this.request({
        path: `/orgs/${organizationId}/teams/${teamId}/members/${userId}`,
        method: "DELETE",
        secure: true,
        ...params
      }),
      inviteUsersToOrganization: (organizationId, data, params = {}) => this.request({
        path: `/orgs/${organizationId}/invites`,
        method: "POST",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      }),
      joinOrganizationWithInvite: (organizationId, inviteId, params = {}) => this.request({
        path: `/orgs/${organizationId}/invites/${inviteId}`,
        method: "POST",
        secure: true,
        format: "json",
        ...params
      }),
      upgradeOrganizationPlan: (organizationId, data, params = {}) => this.request({
        path: `/orgs/${organizationId}/billing`,
        method: "POST",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      }),
      getOrganizationBillingPortal: (organizationId, params = {}) => this.request({
        path: `/orgs/${organizationId}/billing`,
        method: "GET",
        secure: true,
        format: "json",
        ...params
      }),
      requestOrganizationUpgrade: (organizationId, params = {}) => this.request({
        path: `/orgs/${organizationId}/request_upgrade`,
        method: "POST",
        secure: true,
        format: "json",
        ...params
      }),
      transferOrganization: (organizationId, data, params = {}) => this.request({
        path: `/orgs/${organizationId}/transfer`,
        method: "POST",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      }),
      searchOrganizationContent: (organizationId, query, params = {}) => this.request({
        path: `/orgs/${organizationId}/search`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      listSpacesInOrganizationById: (organizationId, query, params = {}) => this.request({
        path: `/orgs/${organizationId}/spaces`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      listCollectionsInOrganizationById: (organizationId, query, params = {}) => this.request({
        path: `/orgs/${organizationId}/collections`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      setupDirectorySync: (organizationId, params = {}) => this.request({
        path: `/orgs/${organizationId}/dsync`,
        method: "POST",
        secure: true,
        format: "json",
        ...params
      }),
      listDirectorySyncGroups: (organizationId, params = {}) => this.request({
        path: `/orgs/${organizationId}/dsync/groups`,
        method: "GET",
        secure: true,
        format: "json",
        ...params
      }),
      syncDirectorySyncGroupsToTeams: (organizationId, data, params = {}) => this.request({
        path: `/orgs/${organizationId}/dsync/teams`,
        method: "POST",
        body: data,
        secure: true,
        type: "application/json" /* Json */,
        format: "json",
        ...params
      })
    };
    this.urls = {
      getContentByUrl: (query, params = {}) => this.request({
        path: `/urls/content`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      })
    };
  }
};

// src/index.ts
var GITBOOK_DEFAULT_ENDPOINT = "https://api.gitbook.com";
var GitBookAPI = class extends Api {
  constructor(options = {}) {
    const { endpoint = GITBOOK_DEFAULT_ENDPOINT, authToken } = options;
    super({
      baseUrl: `${endpoint}/v1`,
      securityWorker: (securityData) => {
        if (securityData.authToken) {
          return {
            headers: {
              Authorization: `Bearer ${securityData.authToken}`
            }
          };
        }
        return {};
      },
      customFetch: async (input, init) => {
        if ("credentials" in init) {
          delete init.credentials;
        }
        if ("referrerPolicy" in init) {
          delete init.referrerPolicy;
        }
        const response = await fetch(input, init);
        if (!response.ok) {
          let error = response.statusText;
          try {
            const body = await response.json();
            error = body?.error?.message || error;
          } catch (err) {
            response.headers.forEach((value, key) => {
              error += `${key}:${value} `;
            });
          }
          throw new Error(
            `GitBook API failed with [${response.status}] ${response.url}: ${error}`
          );
        }
        return response;
      }
    });
    this.endpoint = endpoint;
    this.setSecurityData({ authToken });
  }
  async createInstallationClient(integrationName, installationId) {
    const { data: installationToken } = await this.integrations.createIntegrationInstallationToken(
      integrationName,
      installationId
    );
    return new GitBookAPI({
      endpoint: this.endpoint,
      authToken: installationToken.token
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  APIIntegrationScope,
  AnalyticsSearchPeriod,
  AnalyticsTrafficInterval,
  Api,
  BillingInterval,
  BillingProduct,
  ChangeRequestStatus,
  CloudflareHostnameStatus,
  CloudflareHostnameTLSStatus,
  CloudflareHostnameTLSValidationMethod,
  ContentKitIcon,
  ContentType,
  ContentVisibility,
  GITBOOK_DEFAULT_ENDPOINT,
  GitBookAPI,
  HttpClient,
  ImportContentSource,
  IntegrationCategory,
  IntegrationInstallationSpaceSelection,
  IntegrationInstallationStatus,
  IntegrationScope,
  IntegrationVisibility,
  MemberRole,
  PurgeCDNCacheContextType
});
